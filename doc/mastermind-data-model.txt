# Sample Data Model

{
  :max-turns 12         // 6, 8, 10 or 12
  :secret [1 2 3 4]     // Four slots; we start with ints 
                        // then move to colors/strings
  :turns [
    {
     :guess [1 9 8 2]
     :score {:exact-match? false :color-and-position-matches 1 :color-only-matches: 1}
    },
    {
     :guess [3 4 5 1]
     :score {:exact-match? false :color-and-position-matches 0 :color-only-matches: 2}
    },
    ...   // starts empty then grows up to number-turns length or until win
          // by inserting at the end.
  ]
  :state :playing  // Either :playing, :won, or :lost
}

## Functions

(defn valid-code-elements []
  "Returns a vector of all valid elements (pegs)"
  [ 1 2 3 4 5 6 ])   // Start with integers, but we could change to keywords :red :green etc.

(defn correct-guess? [secret guess]
  "True if the guess matches the secret, false otherwise"
  ,,,)

(defn score-guess [secret guess]
  "Returns the score as two components - exact-match and color-only-match"
  ,,,)

(defn color-and-position-matches [secret guess]
  "Returns the number of pegs in both the color and position"
  ,,,)

(defn color-only-matches [secret guess]
  "Returns the number of pegs with correct color but wrong position."
  ,,,)

